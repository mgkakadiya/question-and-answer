pipeline {
    agent any

    environment {
        GIT_CREDENTIALS_ID    = '74476b73-7267-483b-8ebe-85e5713a8bf1'
    }

    stages {

        // stage('CI') {
        //     agent {
        //         docker { image 'node:18' }
        //     }
        //     // steps {
        //     //     // withCredentials([gitUsernamePassword(credentialsId: env.GIT_CREDENTIALS_ID)]) {
        //     //     //   sh '''
        //     //     //     git submodule update --init --recursive
        //     //     //   '''
        //     //     // }
        //     //     //sh 'npm ci'
        //     //     //Commenting the lint as it is failing in current dev branch
        //     //     //sh 'npm run lint'
        //     //     //Commenting the test as it is failing in the current dev branch
        //     //     //sh 'npm run test'
        //     //     //build for testing
        //     //     //sh 'npm run build:dev'
        //     // }
        // }

        stage('Continuous Integration - SonarQube Analysis') {
            agent {
                docker { image 'uselagoon/node-22:latest' }
            }
            steps {
                script {
                    scannerHome = tool 'global-sonar-scanner';
                }
                withSonarQubeEnv('gloabal-sonarqube-server') {
                    sh "${scannerHome}/bin/sonar-scanner"
                }
                //waitForQualityGate abortPipeline: false
            }
        }

        stage('Build and Deploy - Dev Environment') {
            when {
                expression{env.GIT_BRANCH == 'origin/dev'}
            }
            agent {
                docker { image 'node:18' }
            }
            steps {
                sh 'npm ci'
                sh 'npm run build:dev'

                script {
                    sshPublisher(
                        continueOnError: false, failOnError: true,
                        publishers: [
                            sshPublisherDesc(
                                configName: 'arena9-dev-app-instance',
                                verbose: true,
                                transfers: [
                                    sshTransfer(
                                        remoteDirectory: '/app/arena9/frontend',
                                        sourceFiles: 'build/**',
                                        removePrefix: 'build/'
                                    ),
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }
}
